{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mseo2\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\Project ENG\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import \"./App.css\"; // CSS 파일을 임포트\n\n// function App() {\n//   // 사용자 입력을 저장할 상태 변수 설정\n//   const [inputValue, setInputValue] = useState(\"\");\n\n//   // 입력값이 변경될 때 호출되는 함수\n//   const handleChange = (event) => {\n//     setInputValue(event.target.value); // 입력값 업데이트\n//   };\n\n//   // 입력값을 백엔드로 보내는 함수\n//   const handleSubmit = async (event) => {\n//     event.preventDefault(); // 기본 제출 동작 방지\n//     try {\n//       const response = await axios.post(\"http://localhost:5000/api\", {\n//         input: inputValue, // 서버로 보내는 데이터\n//       });\n//       console.log(response.data); // 서버 응답 출력\n//     } catch (error) {\n//       console.error(\"서버로 데이터 전송 실패:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>사용자 입력 받기</h1>\n//       <form onSubmit={handleSubmit} className=\"form-container\">\n//         <input\n//           type=\"text\"\n//           value={inputValue} // input 값은 상태로 관리\n//           onChange={handleChange} // 입력값이 변경될 때마다 호출되는 함수\n//           placeholder=\"여기에 입력하세요\"\n//           className=\"input-field\"\n//         />\n//         <button type=\"submit\" className=\"submit-button\">\n//           전송\n//         </button>\n//       </form>\n//       <p>입력한 값: {inputValue}</p>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from \"react\";\nimport \"./App.css\"; // CSS 파일을 임포트\nimport ReactMarkdown from \"react-markdown\";\nimport { Markdown } from \"react-markdown/lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // 사용자 입력을 저장할 상태 변수 설정\n  const [inputValue, setInputValue] = useState(\"\");\n  const [responseMessage, setResponseMessage] = useState(\"\"); // 백엔드 응답 메시지 상태\n\n  // 입력값이 변경될 때 호출되는 함수\n  const handleChange = event => {\n    setInputValue(event.target.value); // 입력값 업데이트\n  };\n\n  // 입력값을 백엔드로 보내는 함수\n  const handleSubmit = async event => {\n    event.preventDefault(); // 기본 제출 동작 방지\n    try {\n      const response = await fetch(\"http://localhost:5000/api\", {\n        method: \"POST\",\n        // POST 요청\n        headers: {\n          \"Content-Type\": \"application/json\" // JSON 형식으로 요청\n        },\n        body: JSON.stringify({\n          input: \" \" + inputValue\n        }) // 입력값을 JSON 형식으로 보내기\n      });\n      if (response.ok) {\n        const data = await response.json(); // JSON 응답 받기\n        setResponseMessage(data.message); // 서버 응답을 상태로 설정\n      } else {\n        setResponseMessage(\"서버 응답 오류\");\n      }\n    } catch (error) {\n      console.error(\"서버로 데이터 전송 실패:\", error);\n      setResponseMessage(\"서버로 데이터 전송 실패.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC0AC\\uC6A9\\uC790 \\uC785\\uB825 \\uBC1B\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue // input 값은 상태로 관리\n        ,\n        onChange: handleChange // 입력값이 변경될 때마다 호출되는 함수\n        ,\n        placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uC785\\uB825\\uD55C \\uAC12: \", inputValue]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Markdown, {\n      children: [\"\\uBC31\\uC5D4\\uB4DC \\uC751\\uB2F5: \", responseMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"T0t+s5gvE5a6MWAsS4d+eytB3Hw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactMarkdown","Markdown","jsxDEV","_jsxDEV","App","_s","inputValue","setInputValue","responseMessage","setResponseMessage","handleChange","event","target","value","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","input","ok","data","json","message","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/mseo2/OneDrive/바탕 화면/Project ENG/frontend/src/App.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import \"./App.css\"; // CSS 파일을 임포트\n\n// function App() {\n//   // 사용자 입력을 저장할 상태 변수 설정\n//   const [inputValue, setInputValue] = useState(\"\");\n\n//   // 입력값이 변경될 때 호출되는 함수\n//   const handleChange = (event) => {\n//     setInputValue(event.target.value); // 입력값 업데이트\n//   };\n\n//   // 입력값을 백엔드로 보내는 함수\n//   const handleSubmit = async (event) => {\n//     event.preventDefault(); // 기본 제출 동작 방지\n//     try {\n//       const response = await axios.post(\"http://localhost:5000/api\", {\n//         input: inputValue, // 서버로 보내는 데이터\n//       });\n//       console.log(response.data); // 서버 응답 출력\n//     } catch (error) {\n//       console.error(\"서버로 데이터 전송 실패:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>사용자 입력 받기</h1>\n//       <form onSubmit={handleSubmit} className=\"form-container\">\n//         <input\n//           type=\"text\"\n//           value={inputValue} // input 값은 상태로 관리\n//           onChange={handleChange} // 입력값이 변경될 때마다 호출되는 함수\n//           placeholder=\"여기에 입력하세요\"\n//           className=\"input-field\"\n//         />\n//         <button type=\"submit\" className=\"submit-button\">\n//           전송\n//         </button>\n//       </form>\n//       <p>입력한 값: {inputValue}</p>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from \"react\";\nimport \"./App.css\"; // CSS 파일을 임포트\nimport ReactMarkdown from \"react-markdown\";\nimport { Markdown } from \"react-markdown/lib\";\n\nfunction App() {\n  // 사용자 입력을 저장할 상태 변수 설정\n  const [inputValue, setInputValue] = useState(\"\");\n  const [responseMessage, setResponseMessage] = useState(\"\"); // 백엔드 응답 메시지 상태\n\n  // 입력값이 변경될 때 호출되는 함수\n  const handleChange = (event) => {\n    setInputValue(event.target.value); // 입력값 업데이트\n  };\n\n  // 입력값을 백엔드로 보내는 함수\n  const handleSubmit = async (event) => {\n    event.preventDefault(); // 기본 제출 동작 방지\n    try {\n      const response = await fetch(\"http://localhost:5000/api\", {\n        method: \"POST\", // POST 요청\n        headers: {\n          \"Content-Type\": \"application/json\", // JSON 형식으로 요청\n        },\n        body: JSON.stringify({\n          input: \" \" + inputValue,\n        }), // 입력값을 JSON 형식으로 보내기\n      });\n\n      if (response.ok) {\n        const data = await response.json(); // JSON 응답 받기\n        setResponseMessage(data.message); // 서버 응답을 상태로 설정\n      } else {\n        setResponseMessage(\"서버 응답 오류\");\n      }\n    } catch (error) {\n      console.error(\"서버로 데이터 전송 실패:\", error);\n      setResponseMessage(\"서버로 데이터 전송 실패.\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>사용자 입력 받기</h1>\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <input\n          type=\"text\"\n          value={inputValue} // input 값은 상태로 관리\n          onChange={handleChange} // 입력값이 변경될 때마다 호출되는 함수\n          placeholder=\"여기에 입력하세요\"\n          className=\"input-field\"\n        />\n        <button type=\"submit\" className=\"submit-button\">\n          전송\n        </button>\n      </form>\n      <p>입력한 값: {inputValue}</p>\n      <Markdown>백엔드 응답: {responseMessage}</Markdown>{\" \"}\n      {/* 백엔드에서 받은 응답 출력 */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}