{"ast":null,"code":"import React,{useState}from\"react\";import ReactMarkdown from\"react-markdown\";// react-markdown 추가\nimport\"./App.css\";// CSS 파일을 임포트\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function AppTest(){// 사용자 입력을 저장할 상태 변수 설정\nconst[inputValue,setInputValue]=useState(\"\");const[responseMessage,setResponseMessage]=useState(\"\");// 백엔드 응답 메시지 상태\nconst[isLoading,setIsLoading]=useState(false);// 로딩 상태 추가\nconst[strValue,setStrValue]=useState(\"I understand that this is not ideal, but it is the only feasible way for the payment to be made in full\");// STR 값을 상태로 설정\n// 입력값이 변경될 때 호출되는 함수\nconst handleInputChange=event=>{setInputValue(event.target.value);// 입력값 업데이트\n};// STR 값을 수정하는 함수\nconst handleStrChange=event=>{setStrValue(event.target.value);// STR 수정\n};// 입력값을 백엔드로 보내는 함수\nconst handleSubmit=async event=>{event.preventDefault();// 기본 제출 동작 방지\nsetIsLoading(true);// 요청 시작 시 로딩 활성화\nsetResponseMessage(\"\");try{const response=await fetch(\"http://localhost:8080/api\",{method:\"POST\",// POST 요청\nheaders:{\"Content-Type\":\"application/json\"// JSON 형식으로 요청\n},body:JSON.stringify({input:\"@@\"+strValue+\"@@ , $$\"+inputValue+\"$$\"// STR 값을 사용\n})// 입력값을 JSON 형식으로 보내기\n});if(response.ok){const data=await response.json();// JSON 응답 받기\nsetResponseMessage(data.message);// 서버 응답을 상태로 설정\n}else{setResponseMessage(\"서버 응답 오류\");}}catch(error){console.error(\"서버로 데이터 전송 실패:\",error);setResponseMessage(\"서버로 데이터 전송 실패.\");}setIsLoading(false);// 응답 받으면 로딩 비활성화\n};const handleKeyDown=event=>{if(isLoading){event.preventDefault();// 로딩 중에는 엔터키 입력 방지\nreturn;}// 엔터키(13번) 눌렀을 때 줄바꿈 대신 전송\nif(event.key===\"Enter\"){event.preventDefault();// 줄바꿈 방지\nhandleSubmit(event);// 전송 함수 호출\n}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"english-sentence-container\",children:/*#__PURE__*/_jsx(\"textarea\",{type:\"text\",value:strValue// STR 값은 상태로 관리\n,onChange:handleStrChange// STR 값이 변경될 때마다 호출되는 함수\n,placeholder:\"\\uBC88\\uC5ED\\uD560 \\uC601\\uC5B4 \\uBB38\\uC7A5\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",className:\"input-field\"})}),/*#__PURE__*/_jsx(\"h1\",{children:\"\\uC704 \\uACF5\\uAC04\\uC5D0 \\uC601\\uC5B4 \\uBB38\\uC7A5\\uC744 \\uC801\\uACE0 \\uC544\\uB798 \\uACF5\\uAC04\\uC5D0 \\uD55C\\uAD6D\\uC5B4\\uB85C \\uBB38\\uC7A5\\uC758 \\uB73B\\uC744 \\uC785\\uB825\\uD574\\uBCF4\\uC138\\uC694!\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"form-container\",children:[/*#__PURE__*/_jsx(\"textarea\",{type:\"text\",value:inputValue// input 값은 상태로 관리\n,onChange:handleInputChange// 입력값이 변경될 때마다 호출되는 함수\n,onKeyDown:handleKeyDown// 엔터키 눌렀을 때 전송 처리\n,placeholder:\"\\uC5EC\\uAE30\\uC5D0 \\uC785\\uB825\\uD558\\uC138\\uC694\",className:\"input-field\",disabled:isLoading// 로딩 중에는 입력 비활성화\n}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"submit-button\",disabled:isLoading,children:isLoading?\"로딩 중...\":\"전송\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"markdown-container\",children:[isLoading&&/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(\"div\",{className:\"markdown-output\",children:/*#__PURE__*/_jsx(ReactMarkdown,{children:responseMessage})})]})]});}export default AppTest;","map":{"version":3,"names":["React","useState","ReactMarkdown","jsx","_jsx","jsxs","_jsxs","AppTest","inputValue","setInputValue","responseMessage","setResponseMessage","isLoading","setIsLoading","strValue","setStrValue","handleInputChange","event","target","value","handleStrChange","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","input","ok","data","json","message","error","console","handleKeyDown","key","className","children","type","onChange","placeholder","onSubmit","onKeyDown","disabled"],"sources":["/Users/sid12g/Desktop/KSAT_ENG_LEARNING/frontend/src/AppTesting.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\"; // react-markdown 추가\nimport \"./App.css\"; // CSS 파일을 임포트\n\nfunction AppTest() {\n  // 사용자 입력을 저장할 상태 변수 설정\n  const [inputValue, setInputValue] = useState(\"\");\n  const [responseMessage, setResponseMessage] = useState(\"\"); // 백엔드 응답 메시지 상태\n  const [isLoading, setIsLoading] = useState(false); // 로딩 상태 추가\n  const [strValue, setStrValue] = useState(\n    \"I understand that this is not ideal, but it is the only feasible way for the payment to be made in full\"\n  ); // STR 값을 상태로 설정\n\n  // 입력값이 변경될 때 호출되는 함수\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value); // 입력값 업데이트\n  };\n\n  // STR 값을 수정하는 함수\n  const handleStrChange = (event) => {\n    setStrValue(event.target.value); // STR 수정\n  };\n\n  // 입력값을 백엔드로 보내는 함수\n  const handleSubmit = async (event) => {\n    event.preventDefault(); // 기본 제출 동작 방지\n    setIsLoading(true); // 요청 시작 시 로딩 활성화\n    setResponseMessage(\"\");\n    try {\n      const response = await fetch(\"http://localhost:8080/api\", {\n        method: \"POST\", // POST 요청\n        headers: {\n          \"Content-Type\": \"application/json\", // JSON 형식으로 요청\n        },\n        body: JSON.stringify({\n          input: \"@@\" + strValue + \"@@ , $$\" + inputValue + \"$$\", // STR 값을 사용\n        }), // 입력값을 JSON 형식으로 보내기\n      });\n\n      if (response.ok) {\n        const data = await response.json(); // JSON 응답 받기\n        setResponseMessage(data.message); // 서버 응답을 상태로 설정\n      } else {\n        setResponseMessage(\"서버 응답 오류\");\n      }\n    } catch (error) {\n      console.error(\"서버로 데이터 전송 실패:\", error);\n      setResponseMessage(\"서버로 데이터 전송 실패.\");\n    }\n    setIsLoading(false); // 응답 받으면 로딩 비활성화\n  };\n\n  const handleKeyDown = (event) => {\n    if (isLoading) {\n      event.preventDefault(); // 로딩 중에는 엔터키 입력 방지\n      return;\n    }\n    // 엔터키(13번) 눌렀을 때 줄바꿈 대신 전송\n    if (event.key === \"Enter\") {\n      event.preventDefault(); // 줄바꿈 방지\n      handleSubmit(event); // 전송 함수 호출\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"english-sentence-container\">\n        {/* 사용자가 STR 값을 수정할 수 있도록 입력 필드 추가 */}\n        <textarea\n          type=\"text\"\n          value={strValue} // STR 값은 상태로 관리\n          onChange={handleStrChange} // STR 값이 변경될 때마다 호출되는 함수\n          placeholder=\"번역할 영어 문장을 입력해주세요\"\n          className=\"input-field\"\n        />\n      </div>\n      <h1>\n        위 공간에 영어 문장을 적고 아래 공간에 한국어로 문장의 뜻을\n        입력해보세요!\n      </h1>\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <textarea\n          type=\"text\"\n          value={inputValue} // input 값은 상태로 관리\n          onChange={handleInputChange} // 입력값이 변경될 때마다 호출되는 함수\n          onKeyDown={handleKeyDown} // 엔터키 눌렀을 때 전송 처리\n          placeholder=\"여기에 입력하세요\"\n          className=\"input-field\"\n          disabled={isLoading} // 로딩 중에는 입력 비활성화\n        />\n        <button type=\"submit\" className=\"submit-button\" disabled={isLoading}>\n          {isLoading ? \"로딩 중...\" : \"전송\"}\n        </button>\n      </form>\n      <div className=\"markdown-container\">\n        {isLoading && <div className=\"loading-spinner\"></div>}\n        <div className=\"markdown-output\">\n          <ReactMarkdown>{responseMessage}</ReactMarkdown>\n        </div>\n      </div>\n      {/* <p>백엔드 응답: {responseMessage}</p> 백엔드에서 받은 응답 출력 */}\n    </div>\n  );\n}\n\nexport default AppTest;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}