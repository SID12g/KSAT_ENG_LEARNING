{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mseo2\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\Project ENG\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\"; // react-markdown 추가\nimport \"./App.css\"; // CSS 파일을 임포트\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STR = \"Hello World!\";\nfunction App() {\n  _s();\n  // 사용자 입력을 저장할 상태 변수 설정\n  const [inputValue, setInputValue] = useState(\"\");\n  const [responseMessage, setResponseMessage] = useState(\"\"); // 백엔드 응답 메시지 상태\n  const [isLoading, setIsLoading] = useState(false); // 로딩 상태 추가\n\n  // 입력값이 변경될 때 호출되는 함수\n  const handleChange = event => {\n    setInputValue(event.target.value); // 입력값 업데이트\n  };\n\n  // 입력값을 백엔드로 보내는 함수\n  const handleSubmit = async event => {\n    event.preventDefault(); // 기본 제출 동작 방지\n    setIsLoading(true); // 요청 시작 시 로딩 활성화\n    try {\n      const response = await fetch(\"http://localhost:5000/api\", {\n        method: \"POST\",\n        // POST 요청\n        headers: {\n          \"Content-Type\": \"application/json\" // JSON 형식으로 요청\n        },\n        body: JSON.stringify({\n          input: STR + \"를 한국어로 번역하면 (\" + inputValue + \") 맞아?, 맞게 번역했다면 정확합니다! 하나만 출력하고, 틀렸다면 틀린 점을 자세히 출력해줘\"\n        }) // 입력값을 JSON 형식으로 보내기\n      });\n      if (response.ok) {\n        const data = await response.json(); // JSON 응답 받기\n        setResponseMessage(data.message); // 서버 응답을 상태로 설정\n      } else {\n        setResponseMessage(\"서버 응답 오류\");\n      }\n    } catch (error) {\n      console.error(\"서버로 데이터 전송 실패:\", error);\n      setResponseMessage(\"서버로 데이터 전송 실패.\");\n    }\n    setIsLoading(false); // 응답 받으면 로딩 비활성화\n  };\n  const handleKeyDown = event => {\n    // 엔터키(13번) 눌렀을 때 줄바꿈 대신 전송\n    if (event.key === \"Enter\") {\n      event.preventDefault(); // 줄바꿈 방지\n      handleSubmit(event); // 전송 함수 호출\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"english-sentence-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: STR\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC704 \\uBB38\\uC7A5\\uC758 \\uB73B\\uC744 \\uC785\\uB825\\uD574\\uBCF4\\uC138\\uC694!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        type: \"text\",\n        value: inputValue // input 값은 상태로 관리\n        ,\n        onChange: handleChange // 입력값이 변경될 때마다 호출되는 함수\n        ,\n        onKeyDown: handleKeyDown // 엔터키 눌렀을 때 전송 처리\n        ,\n        placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        disabled: isLoading,\n        children: isLoading ? \"로딩 중...\" : \"전송\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"markdown-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"markdown-output\",\n        children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          children: responseMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"34Eeoopy0paugc/ynllyY5PDg74=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactMarkdown","jsxDEV","_jsxDEV","STR","App","_s","inputValue","setInputValue","responseMessage","setResponseMessage","isLoading","setIsLoading","handleChange","event","target","value","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","input","ok","data","json","message","error","console","handleKeyDown","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","onKeyDown","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/mseo2/OneDrive/바탕 화면/Project ENG/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\"; // react-markdown 추가\nimport \"./App.css\"; // CSS 파일을 임포트\n\nconst STR = \"Hello World!\";\nfunction App() {\n  // 사용자 입력을 저장할 상태 변수 설정\n  const [inputValue, setInputValue] = useState(\"\");\n  const [responseMessage, setResponseMessage] = useState(\"\"); // 백엔드 응답 메시지 상태\n  const [isLoading, setIsLoading] = useState(false); // 로딩 상태 추가\n\n  // 입력값이 변경될 때 호출되는 함수\n  const handleChange = (event) => {\n    setInputValue(event.target.value); // 입력값 업데이트\n  };\n\n  // 입력값을 백엔드로 보내는 함수\n  const handleSubmit = async (event) => {\n    event.preventDefault(); // 기본 제출 동작 방지\n    setIsLoading(true); // 요청 시작 시 로딩 활성화\n    try {\n      const response = await fetch(\"http://localhost:5000/api\", {\n        method: \"POST\", // POST 요청\n        headers: {\n          \"Content-Type\": \"application/json\", // JSON 형식으로 요청\n        },\n        body: JSON.stringify({\n          input:\n            STR +\n            \"를 한국어로 번역하면 (\" +\n            inputValue +\n            \") 맞아?, 맞게 번역했다면 정확합니다! 하나만 출력하고, 틀렸다면 틀린 점을 자세히 출력해줘\",\n        }), // 입력값을 JSON 형식으로 보내기\n      });\n\n      if (response.ok) {\n        const data = await response.json(); // JSON 응답 받기\n        setResponseMessage(data.message); // 서버 응답을 상태로 설정\n      } else {\n        setResponseMessage(\"서버 응답 오류\");\n      }\n    } catch (error) {\n      console.error(\"서버로 데이터 전송 실패:\", error);\n      setResponseMessage(\"서버로 데이터 전송 실패.\");\n    }\n    setIsLoading(false); // 응답 받으면 로딩 비활성화\n  };\n  const handleKeyDown = (event) => {\n    // 엔터키(13번) 눌렀을 때 줄바꿈 대신 전송\n    if (event.key === \"Enter\") {\n      event.preventDefault(); // 줄바꿈 방지\n      handleSubmit(event); // 전송 함수 호출\n    }\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"english-sentence-container\">\n        <p>{STR}</p> {/* 예시 문장 */}\n      </div>\n      <h1>위 문장의 뜻을 입력해보세요!</h1>\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <textarea\n          type=\"text\"\n          value={inputValue} // input 값은 상태로 관리\n          onChange={handleChange} // 입력값이 변경될 때마다 호출되는 함수\n          onKeyDown={handleKeyDown} // 엔터키 눌렀을 때 전송 처리\n          placeholder=\"여기에 입력하세요\"\n          className=\"input-field\"\n        />\n        <button type=\"submit\" className=\"submit-button\" disabled={isLoading}>\n          {isLoading ? \"로딩 중...\" : \"전송\"}\n        </button>\n      </form>\n      <div className=\"markdown-container\">\n        <div className=\"markdown-output\">\n          <ReactMarkdown>{responseMessage}</ReactMarkdown>\n        </div>\n      </div>\n      {/* <p>백엔드 응답: {responseMessage}</p> 백엔드에서 받은 응답 출력 */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}