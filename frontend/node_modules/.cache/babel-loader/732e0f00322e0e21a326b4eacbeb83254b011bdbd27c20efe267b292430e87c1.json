{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mseo2\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\Project ENG\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\"; // react-markdown 추가\nimport \"./App.css\"; // CSS 파일을 임포트\n\n//const STR = \"Dimigo is the best highschool\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STR = \"디미고는 최고의 고등학교다\";\nconst systemMessage = {\n  parts: [{\n    text: \"너는 사용자의 번역이 맞는지 확인해주는 프로그램이야. 너에게는 영어 문장과 사용자의 한국어 입력이 input으로 주어질거고, 사용자의 한국어 입력이 영어 문장을 번역했을때 뜻과 일치하는지 아닌지를 판단해야하며, 만약 잘못 번역했다면 개선점까지 출력해주어야돼\"\n  }],\n  role: \"system\"\n};\nconst examples = [{\n  input: {\n    parts: [{\n      text: \"@@Dimigo is the best highschool@@ + $$디미고는 최고의 고등학교이다$$\"\n    }]\n  },\n  output: {\n    parts: [{\n      text: \"정확합니다!\"\n    }]\n  }\n}, {\n  input: {\n    parts: [{\n      text: \"@@Dimigo is the best highschool@@ + $$디미고는 훌륭한 고등학교이다$$\"\n    }]\n  },\n  output: {\n    parts: [{\n      text: \"정확합니다!\"\n    }]\n  }\n}, {\n  input: {\n    parts: [{\n      text: \"@@Dimigo is the best highschool@@ + $$디미고는 좋은 학교이다$$\"\n    }]\n  },\n  output: {\n    parts: [{\n      text: \"비슷합니다! 하지만 best(최상급)의 느낌이 나타나면 좋으며, 그냥 학교보다는 고등학교가 더 정확한 번역입니다. 예시) 디미고는 최고로 좋은 고등학교이다.\"\n    }]\n  }\n}, {\n  input: {\n    parts: [{\n      text: \"@@The cat jumped high@@ + $$그 고양이는 낮게 뛰었다$$\"\n    }]\n  },\n  output: {\n    parts: [{\n      text: \"틀렸습니다! 본 문장에서 high는 '높이', 혹은 '높게'라고 해석되어야 합니다. 옳은 해석) 그 고양이는 높게 뛰었다.\"\n    }]\n  }\n}, {\n  input: {\n    parts: [{\n      text: \"@@He's playing a guitar@@ + $$그는 기타를 놀고 있다$$\"\n    }]\n  },\n  output: {\n    parts: [{\n      text: \"틀렸습니다! 일반적으로 play는 '놀다'라는 뜻으로 쓰이지만 본 문장에서는 '(악기를)연주하다' 라는 뜻으로 쓰였습니다. 옳은 해석) 그는 기타를 연주하고 있다.\"\n    }]\n  }\n}];\nfunction App() {\n  _s();\n  // 사용자 입력을 저장할 상태 변수 설정\n  const [inputValue, setInputValue] = useState(\"\");\n  const [responseMessage, setResponseMessage] = useState(\"\"); // 백엔드 응답 메시지 상태\n  const [isLoading, setIsLoading] = useState(false); // 로딩 상태 추가\n\n  // 입력값이 변경될 때 호출되는 함수\n  const handleChange = event => {\n    setInputValue(event.target.value); // 입력값 업데이트\n  };\n\n  // 입력값을 백엔드로 보내는 함수\n  const handleSubmit = async event => {\n    event.preventDefault(); // 기본 제출 동작 방지\n    setIsLoading(true); // 요청 시작 시 로딩 활성화\n    try {\n      const response = await fetch(\"http://localhost:5000/api\", {\n        method: \"POST\",\n        // POST 요청\n        headers: {\n          \"Content-Type\": \"application/json\" // JSON 형식으로 요청\n        },\n        body: JSON.stringify({\n          input: \"@@\" + STR + \"@@ , $$\" + inputValue + \"$$\"\n        }) // 입력값을 JSON 형식으로 보내기\n      });\n      if (response.ok) {\n        const data = await response.json(); // JSON 응답 받기\n        setResponseMessage(data.message); // 서버 응답을 상태로 설정\n      } else {\n        setResponseMessage(\"서버 응답 오류\");\n      }\n    } catch (error) {\n      console.error(\"서버로 데이터 전송 실패:\", error);\n      setResponseMessage(\"서버로 데이터 전송 실패.\");\n    }\n    setIsLoading(false); // 응답 받으면 로딩 비활성화\n  };\n  const handleKeyDown = event => {\n    // 엔터키(13번) 눌렀을 때 줄바꿈 대신 전송\n    if (event.key === \"Enter\") {\n      event.preventDefault(); // 줄바꿈 방지\n      handleSubmit(event); // 전송 함수 호출\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"english-sentence-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: STR\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC704 \\uBB38\\uC7A5\\uC758 \\uB73B\\uC744 \\uC785\\uB825\\uD574\\uBCF4\\uC138\\uC694!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        type: \"text\",\n        value: inputValue // input 값은 상태로 관리\n        ,\n        onChange: handleChange // 입력값이 변경될 때마다 호출되는 함수\n        ,\n        onKeyDown: handleKeyDown // 엔터키 눌렀을 때 전송 처리\n        ,\n        placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        disabled: isLoading,\n        children: isLoading ? \"로딩 중...\" : \"전송\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"markdown-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"markdown-output\",\n        children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          children: responseMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"34Eeoopy0paugc/ynllyY5PDg74=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactMarkdown","jsxDEV","_jsxDEV","STR","systemMessage","parts","text","role","examples","input","output","App","_s","inputValue","setInputValue","responseMessage","setResponseMessage","isLoading","setIsLoading","handleChange","event","target","value","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","data","json","message","error","console","handleKeyDown","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","onKeyDown","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/mseo2/OneDrive/바탕 화면/Project ENG/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\"; // react-markdown 추가\nimport \"./App.css\"; // CSS 파일을 임포트\n\n//const STR = \"Dimigo is the best highschool\";\nconst STR = \"디미고는 최고의 고등학교다\";\nconst systemMessage = {\n  parts: [\n    {\n      text: \"너는 사용자의 번역이 맞는지 확인해주는 프로그램이야. 너에게는 영어 문장과 사용자의 한국어 입력이 input으로 주어질거고, 사용자의 한국어 입력이 영어 문장을 번역했을때 뜻과 일치하는지 아닌지를 판단해야하며, 만약 잘못 번역했다면 개선점까지 출력해주어야돼\",\n    },\n  ],\n  role: \"system\",\n};\nconst examples = [\n  {\n    input: {\n      parts: [\n        {\n          text: \"@@Dimigo is the best highschool@@ + $$디미고는 최고의 고등학교이다$$\",\n        },\n      ],\n    },\n    output: { parts: [{ text: \"정확합니다!\" }] },\n  },\n  {\n    input: {\n      parts: [\n        {\n          text: \"@@Dimigo is the best highschool@@ + $$디미고는 훌륭한 고등학교이다$$\",\n        },\n      ],\n    },\n    output: { parts: [{ text: \"정확합니다!\" }] },\n  },\n  {\n    input: {\n      parts: [\n        {\n          text: \"@@Dimigo is the best highschool@@ + $$디미고는 좋은 학교이다$$\",\n        },\n      ],\n    },\n    output: {\n      parts: [\n        {\n          text: \"비슷합니다! 하지만 best(최상급)의 느낌이 나타나면 좋으며, 그냥 학교보다는 고등학교가 더 정확한 번역입니다. 예시) 디미고는 최고로 좋은 고등학교이다.\",\n        },\n      ],\n    },\n  },\n  {\n    input: {\n      parts: [\n        { text: \"@@The cat jumped high@@ + $$그 고양이는 낮게 뛰었다$$\" },\n      ],\n    },\n    output: {\n      parts: [\n        {\n          text: \"틀렸습니다! 본 문장에서 high는 '높이', 혹은 '높게'라고 해석되어야 합니다. 옳은 해석) 그 고양이는 높게 뛰었다.\",\n        },\n      ],\n    },\n  },\n  {\n    input: {\n      parts: [\n        { text: \"@@He's playing a guitar@@ + $$그는 기타를 놀고 있다$$\" },\n      ],\n    },\n    output: {\n      parts: [\n        {\n          text: \"틀렸습니다! 일반적으로 play는 '놀다'라는 뜻으로 쓰이지만 본 문장에서는 '(악기를)연주하다' 라는 뜻으로 쓰였습니다. 옳은 해석) 그는 기타를 연주하고 있다.\",\n        },\n      ],\n    },\n  },\n];\nfunction App() {\n  // 사용자 입력을 저장할 상태 변수 설정\n  const [inputValue, setInputValue] = useState(\"\");\n  const [responseMessage, setResponseMessage] = useState(\"\"); // 백엔드 응답 메시지 상태\n  const [isLoading, setIsLoading] = useState(false); // 로딩 상태 추가\n\n  // 입력값이 변경될 때 호출되는 함수\n  const handleChange = (event) => {\n    setInputValue(event.target.value); // 입력값 업데이트\n  };\n\n  // 입력값을 백엔드로 보내는 함수\n  const handleSubmit = async (event) => {\n    event.preventDefault(); // 기본 제출 동작 방지\n    setIsLoading(true); // 요청 시작 시 로딩 활성화\n    try {\n      const response = await fetch(\"http://localhost:5000/api\", {\n        method: \"POST\", // POST 요청\n        headers: {\n          \"Content-Type\": \"application/json\", // JSON 형식으로 요청\n        },\n        body: JSON.stringify({\n          input: \"@@\" + STR + \"@@ , $$\" + inputValue + \"$$\",\n        }), // 입력값을 JSON 형식으로 보내기\n      });\n\n      if (response.ok) {\n        const data = await response.json(); // JSON 응답 받기\n        setResponseMessage(data.message); // 서버 응답을 상태로 설정\n      } else {\n        setResponseMessage(\"서버 응답 오류\");\n      }\n    } catch (error) {\n      console.error(\"서버로 데이터 전송 실패:\", error);\n      setResponseMessage(\"서버로 데이터 전송 실패.\");\n    }\n    setIsLoading(false); // 응답 받으면 로딩 비활성화\n  };\n  const handleKeyDown = (event) => {\n    // 엔터키(13번) 눌렀을 때 줄바꿈 대신 전송\n    if (event.key === \"Enter\") {\n      event.preventDefault(); // 줄바꿈 방지\n      handleSubmit(event); // 전송 함수 호출\n    }\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"english-sentence-container\">\n        <p>{STR}</p> {/* 예시 문장 */}\n      </div>\n      <h1>위 문장의 뜻을 입력해보세요!</h1>\n      <form onSubmit={handleSubmit} className=\"form-container\">\n        <textarea\n          type=\"text\"\n          value={inputValue} // input 값은 상태로 관리\n          onChange={handleChange} // 입력값이 변경될 때마다 호출되는 함수\n          onKeyDown={handleKeyDown} // 엔터키 눌렀을 때 전송 처리\n          placeholder=\"여기에 입력하세요\"\n          className=\"input-field\"\n        />\n        <button type=\"submit\" className=\"submit-button\" disabled={isLoading}>\n          {isLoading ? \"로딩 중...\" : \"전송\"}\n        </button>\n      </form>\n      <div className=\"markdown-container\">\n        <div className=\"markdown-output\">\n          <ReactMarkdown>{responseMessage}</ReactMarkdown>\n        </div>\n      </div>\n      {/* <p>백엔드 응답: {responseMessage}</p> 백엔드에서 받은 응답 출력 */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}